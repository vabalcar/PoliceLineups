/**
 * Police lineups
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuthRequest } from '../model/authRequest';
import { AuthResponse } from '../model/authResponse';
import { AuthTokenRenewalResponse } from '../model/authTokenRenewalResponse';
import { EmptyResponse } from '../model/emptyResponse';
import { Lineup } from '../model/lineup';
import { LineupOverview } from '../model/lineupOverview';
import { Person } from '../model/person';
import { Response } from '../model/response';
import { User } from '../model/user';
import { UserWithPassword } from '../model/userWithPassword';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a lineup
     * 
     * @param body a lineup to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addLineup(body: Lineup, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public addLineup(body: Lineup, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public addLineup(body: Lineup, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public addLineup(body: Lineup, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addLineup.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/lineups`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a person
     * 
     * @param fullName 
     * @param birthDate 
     * @param nationality 
     * @param photoFile 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPersonForm(fullName: string, birthDate: string, nationality: string, photoFile: Blob, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public addPersonForm(fullName: string, birthDate: string, nationality: string, photoFile: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public addPersonForm(fullName: string, birthDate: string, nationality: string, photoFile: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public addPersonForm(fullName: string, birthDate: string, nationality: string, photoFile: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (fullName === null || fullName === undefined) {
            throw new Error('Required parameter fullName was null or undefined when calling addPerson.');
        }

        if (birthDate === null || birthDate === undefined) {
            throw new Error('Required parameter birthDate was null or undefined when calling addPerson.');
        }

        if (nationality === null || nationality === undefined) {
            throw new Error('Required parameter nationality was null or undefined when calling addPerson.');
        }

        if (photoFile === null || photoFile === undefined) {
            throw new Error('Required parameter photoFile was null or undefined when calling addPerson.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (fullName !== undefined) {
            formParams = formParams.append('fullName', <any>fullName) as any || formParams;
        }
        if (birthDate !== undefined) {
            formParams = formParams.append('birthDate', <any>birthDate) as any || formParams;
        }
        if (nationality !== undefined) {
            formParams = formParams.append('nationality', <any>nationality) as any || formParams;
        }
        if (photoFile !== undefined) {
            formParams = formParams.append('photoFile', <any>photoFile) as any || formParams;
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/people`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a user
     * 
     * @param body a user to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUser(body: UserWithPassword, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public addUser(body: UserWithPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public addUser(body: UserWithPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public addUser(body: UserWithPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthAdmin) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Serves a blob
     * 
     * @param blobName name of a blob to serve
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBlob(blobName: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getBlob(blobName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getBlob(blobName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getBlob(blobName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blobName === null || blobName === undefined) {
            throw new Error('Required parameter blobName was null or undefined when calling getBlob.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Blob>('get',`${this.basePath}/blobs/${encodeURIComponent(String(blobName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentUser(observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getCurrentUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getCurrentUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getCurrentUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<User>('get',`${this.basePath}/users/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a lineup
     * 
     * @param lineupId id of a lineup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLineup(lineupId: number, observe?: 'body', reportProgress?: boolean): Observable<Lineup>;
    public getLineup(lineupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Lineup>>;
    public getLineup(lineupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Lineup>>;
    public getLineup(lineupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (lineupId === null || lineupId === undefined) {
            throw new Error('Required parameter lineupId was null or undefined when calling getLineup.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Lineup>('get',`${this.basePath}/lineups/${encodeURIComponent(String(lineupId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of recommended people based on list of people in lineup
     * 
     * @param body list of people in lineup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLineupRecommendations(body: Array<Person>, observe?: 'body', reportProgress?: boolean): Observable<Array<Person>>;
    public getLineupRecommendations(body: Array<Person>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Person>>>;
    public getLineupRecommendations(body: Array<Person>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Person>>>;
    public getLineupRecommendations(body: Array<Person>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getLineupRecommendations.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Person>>('post',`${this.basePath}/lineups/recommendations`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of lineups for all users
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLineups(observe?: 'body', reportProgress?: boolean): Observable<Array<LineupOverview>>;
    public getLineups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LineupOverview>>>;
    public getLineups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LineupOverview>>>;
    public getLineups(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JwtAuthAdmin) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<LineupOverview>>('get',`${this.basePath}/lineups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of lineups for all users
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLineupsForCurrentUser(observe?: 'body', reportProgress?: boolean): Observable<Array<LineupOverview>>;
    public getLineupsForCurrentUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LineupOverview>>>;
    public getLineupsForCurrentUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LineupOverview>>>;
    public getLineupsForCurrentUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<LineupOverview>>('get',`${this.basePath}/user/current/lineups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of people
     * 
     * @param fullName 
     * @param minAge 
     * @param maxAge 
     * @param nationality 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPeople(fullName?: string, minAge?: number, maxAge?: number, nationality?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Person>>;
    public getPeople(fullName?: string, minAge?: number, maxAge?: number, nationality?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Person>>>;
    public getPeople(fullName?: string, minAge?: number, maxAge?: number, nationality?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Person>>>;
    public getPeople(fullName?: string, minAge?: number, maxAge?: number, nationality?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (fullName !== undefined && fullName !== null) {
            queryParameters = queryParameters.set('fullName', <any>fullName);
        }
        if (minAge !== undefined && minAge !== null) {
            queryParameters = queryParameters.set('minAge', <any>minAge);
        }
        if (maxAge !== undefined && maxAge !== null) {
            queryParameters = queryParameters.set('maxAge', <any>maxAge);
        }
        if (nationality !== undefined && nationality !== null) {
            queryParameters = queryParameters.set('nationality', <any>nationality);
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Person>>('get',`${this.basePath}/people`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a person
     * 
     * @param personId id of a person
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPerson(personId: number, observe?: 'body', reportProgress?: boolean): Observable<Person>;
    public getPerson(personId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Person>>;
    public getPerson(personId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Person>>;
    public getPerson(personId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling getPerson.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Person>('get',`${this.basePath}/people/${encodeURIComponent(String(personId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a user
     * 
     * @param userId id of a user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUser(userId: number, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUser(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUser(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUser(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthAdmin) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<User>('get',`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all users
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JwtAuthAdmin) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<User>>('get',`${this.basePath}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Logins registered userUser
     * 
     * @param body AuthRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public login(body: AuthRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;
    public login(body: AuthRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;
    public login(body: AuthRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;
    public login(body: AuthRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling login.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AuthResponse>('post',`${this.basePath}/authorization`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeCurrentUser(observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public removeCurrentUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public removeCurrentUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public removeCurrentUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Response>('delete',`${this.basePath}/users/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a lineup
     * 
     * @param lineupId id of a lineup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeLineup(lineupId: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public removeLineup(lineupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public removeLineup(lineupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public removeLineup(lineupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (lineupId === null || lineupId === undefined) {
            throw new Error('Required parameter lineupId was null or undefined when calling removeLineup.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Response>('delete',`${this.basePath}/lineups/${encodeURIComponent(String(lineupId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a person
     * 
     * @param personId id of a person
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removePerson(personId: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public removePerson(personId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public removePerson(personId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public removePerson(personId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling removePerson.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Response>('delete',`${this.basePath}/people/${encodeURIComponent(String(personId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a user
     * 
     * @param userId id of a user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUser(userId: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public removeUser(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public removeUser(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public removeUser(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthAdmin) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Response>('delete',`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Renews auth token
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public renewAuthToken(observe?: 'body', reportProgress?: boolean): Observable<AuthTokenRenewalResponse>;
    public renewAuthToken(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthTokenRenewalResponse>>;
    public renewAuthToken(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthTokenRenewalResponse>>;
    public renewAuthToken(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthTokenRenewalResponse>('patch',`${this.basePath}/authorization`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a blob
     * 
     * @param blob 
     * @param blobName name of a blob
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBlobForm(blob: Blob, blobName: string, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateBlobForm(blob: Blob, blobName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateBlobForm(blob: Blob, blobName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateBlobForm(blob: Blob, blobName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (blob === null || blob === undefined) {
            throw new Error('Required parameter blob was null or undefined when calling updateBlob.');
        }

        if (blobName === null || blobName === undefined) {
            throw new Error('Required parameter blobName was null or undefined when calling updateBlob.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (blob !== undefined) {
            formParams = formParams.append('blob', <any>blob) as any || formParams;
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/blobs/${encodeURIComponent(String(blobName))}`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a user
     * 
     * @param body update of user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCurrentUser(body: UserWithPassword, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateCurrentUser(body: UserWithPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateCurrentUser(body: UserWithPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateCurrentUser(body: UserWithPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateCurrentUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/users/current`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a lineup
     * 
     * @param body a lineup to update
     * @param lineupId id of a lineup
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateLineup(body: Lineup, lineupId: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateLineup(body: Lineup, lineupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateLineup(body: Lineup, lineupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateLineup(body: Lineup, lineupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateLineup.');
        }

        if (lineupId === null || lineupId === undefined) {
            throw new Error('Required parameter lineupId was null or undefined when calling updateLineup.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/lineups/${encodeURIComponent(String(lineupId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a person
     * 
     * @param body a person to update
     * @param personId id of a person
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePerson(body: Person, personId: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updatePerson(body: Person, personId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updatePerson(body: Person, personId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updatePerson(body: Person, personId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePerson.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling updatePerson.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/people/${encodeURIComponent(String(personId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a user
     * 
     * @param body update of user
     * @param userId id of a user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUser(body: UserWithPassword, userId: number, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public updateUser(body: UserWithPassword, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public updateUser(body: UserWithPassword, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public updateUser(body: UserWithPassword, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthAdmin) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('patch',`${this.basePath}/users/${encodeURIComponent(String(userId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Validated properties of a new user
     * 
     * @param body a user to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateNewUser(body: UserWithPassword, observe?: 'body', reportProgress?: boolean): Observable<Response>;
    public validateNewUser(body: UserWithPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Response>>;
    public validateNewUser(body: UserWithPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Response>>;
    public validateNewUser(body: UserWithPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling validateNewUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (JwtAuthUser) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Response>('post',`${this.basePath}/validation/users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
