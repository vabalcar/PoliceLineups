swagger: "2.0"
info:
  title: Police lineups
  version: 1.0.0
host: localhost:8080
basePath: /v1
schemes:
  - http
paths:
  /login:
    post:
      summary: Logins registered user
      x-swagger-router-controller: controllers.auth
      operationId: login
      consumes:
        - application/json
      parameters:
        - in: body
          name: request
          description: AuthRequest
          required: true
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthRequest'
      produces:
        - application/json
      responses:
        '200':
          description: login result
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'
  /isLoggedIn:
    get:
      summary: Checks if an user is logged-in
      x-swagger-router-controller: controllers.auth
      operationId: isLoggedIn
      produces:
        - application/json
      responses:
        '200':
          description: is-logged-in check result
          schema:
            type: object
            items: 
              $ref: '#/definitions/Response'
  /logout:
    get:
      summary: Logouts logged-in user
      x-swagger-router-controller: controllers.auth
      operationId: logout
      produces:
        - application/json
      responses:
        '200':
          description: logout result
          schema:
            type: object
            items: 
              $ref: '#/definitions/Response'
  /register:
    post:
      summary: Registers an user
      x-swagger-router-controller: controllers.auth
      operationId: register
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: an user to register
          required: true
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: registration result
          schema:
            type: object
            items:
              $ref: '#/definitions/Response'
  /unregister:
    post:
      summary: Unregisters an user
      x-swagger-router-controller: controllers.auth
      operationId: unregister
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: an user to unregister
          required: true
          schema:
            type: object
            items:
              $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: unregistration result
          schema:
            type: object
            items:
              $ref: '#/definitions/Response'
  /users:
    get:
      summary: Returns a list of users.
      x-swagger-router-controller: controllers.users
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: a JSON array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /user/{id}:
    get:
      summary: Returns a user.
      x-swagger-router-controller: controllers.users
      operationId: getUser
      parameters:
        - in: path
          name: id
          description: ID of the user.
          required: true
          type: integer
      produces: 
        - application/json
      responses:
        '200':
          description: a JSON object describing the User
          schema:
            type: object
            items: 
              $ref: '#/definitions/User'
  /people:
    get:
      summary: Returns a list of people.
      x-swagger-router-controller: controllers.people
      operationId: getPeople
      produces: 
        - application/json
      responses:
        '200':
          description: a JSON array of people
          schema:
            type: array
            items:
              $ref: '#/definitions/Person'
  /person/{id}:
    get:
      summary: Returns a person.
      x-swagger-router-controller: controllers.people
      operationId: getPerson
      parameters:
        - in: path
          name: id
          description: ID of the person.
          required: true
          type: integer
      produces: 
        - application/json
      responses:
        '200':
          description: a JSON object describing the person
          schema:
            type: object
            items:
              $ref: '#/definitions/Person'
definitions:
  AuthRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      path:
        type: string
    required:
      - username
      - password
      - path
  Response:
    type: object
    properties:
      success: 
        type: boolean
  AuthResponse:
    allOf:
      - $ref: '#/definitions/Response'
      - type: object
        properties:
          path: 
            type: string
  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      password:
        type: string
      name:
        type: string
      email:
        type: string
  Person:
    type: object
    properties:
      id:
        type: integer
      pid:
        type: string
      name:
        type: string
      born:
        type: integer
      nationality:
        type: string
      features:
        type: string
