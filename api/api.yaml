openapi: '3.0.2'
info:
  title: Police lineups
  version: '1.0'
servers:
  - url: http://localhost:8080/v1
paths:
  /login:
    post:
      summary: Logins registered user
      x-swagger-router-controller: controllers.auth
      operationId: login
      requestBody:
        description: AuthRequest
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: login result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /isLoggedIn:
    get:
      summary: Checks if a user is logged-in
      x-swagger-router-controller: controllers.auth
      operationId: isLoggedIn
      responses:
        '200':
          description: is-logged-in check result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /logout:
    get:
      summary: Logouts logged-in user
      x-swagger-router-controller: controllers.auth
      operationId: logout
      responses:
        '200':
          description: logout result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /users:
    get:
      summary: Returns a list of users.
      x-swagger-router-controller: controllers.users
      operationId: getUsers
      responses:
        '200':
          description: a JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Registers a user
      x-swagger-router-controller: controllers.users
      operationId: register
      requestBody:
        description: a user to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: registration result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /user/{username}:
    get:
      summary: Returns a user
      x-swagger-router-controller: controllers.users
      operationId: get
      parameters:
        - in: path
          name: username
          description: username of a user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: a JSON object describing the User
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      summary: Updates a user
      x-swagger-router-controller: controllers.users
      operationId: update
      requestBody:
        description: a user to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: username
          description: username of a user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: unregistration result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
    delete:
      summary: Deletes a user
      x-swagger-router-controller: controllers.users
      operationId: delete
      parameters:
        - in: path
          name: username
          description: a username of a user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: unregistration result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
  /people:
    get:
      summary: Returns a list of people
      x-swagger-router-controller: controllers.people
      operationId: getPeople
      responses:
        '200':
          description: a JSON array of people
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
  /person/{id}:
    get:
      summary: Returns a person
      x-swagger-router-controller: controllers.people
      operationId: getPerson
      parameters:
        - in: path
          name: id
          description: ID of the person
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: a JSON object describing the person
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
components:
  schemas:
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        path:
          type: string
      required:
        - username
        - password
        - path
    Response:
      type: object
      properties:
        success: 
          type: boolean
    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            path: 
              type: string
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        name:
          type: string
        email:
          type: string
    Person:
      type: object
      properties:
        id:
          type: integer
        pid:
          type: string
        name:
          type: string
        born:
          type: integer
        nationality:
          type: string
        features:
          type: string
