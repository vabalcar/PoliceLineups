# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.response import Response  # noqa: F401,E501
from swagger_server import util


class AuthTokenRenewalResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, success: bool=None, auth_token: str=None, token_expiration_datetime: datetime=None):  # noqa: E501
        """AuthTokenRenewalResponse - a model defined in Swagger

        :param success: The success of this AuthTokenRenewalResponse.  # noqa: E501
        :type success: bool
        :param auth_token: The auth_token of this AuthTokenRenewalResponse.  # noqa: E501
        :type auth_token: str
        :param token_expiration_datetime: The token_expiration_datetime of this AuthTokenRenewalResponse.  # noqa: E501
        :type token_expiration_datetime: datetime
        """
        self.swagger_types = {
            'success': bool,
            'auth_token': str,
            'token_expiration_datetime': datetime
        }

        self.attribute_map = {
            'success': 'success',
            'auth_token': 'authToken',
            'token_expiration_datetime': 'tokenExpirationDatetime'
        }
        self._success = success
        self._auth_token = auth_token
        self._token_expiration_datetime = token_expiration_datetime

    @classmethod
    def from_dict(cls, dikt) -> 'AuthTokenRenewalResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthTokenRenewalResponse of this AuthTokenRenewalResponse.  # noqa: E501
        :rtype: AuthTokenRenewalResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def success(self) -> bool:
        """Gets the success of this AuthTokenRenewalResponse.


        :return: The success of this AuthTokenRenewalResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success: bool):
        """Sets the success of this AuthTokenRenewalResponse.


        :param success: The success of this AuthTokenRenewalResponse.
        :type success: bool
        """

        self._success = success

    @property
    def auth_token(self) -> str:
        """Gets the auth_token of this AuthTokenRenewalResponse.


        :return: The auth_token of this AuthTokenRenewalResponse.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token: str):
        """Sets the auth_token of this AuthTokenRenewalResponse.


        :param auth_token: The auth_token of this AuthTokenRenewalResponse.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def token_expiration_datetime(self) -> datetime:
        """Gets the token_expiration_datetime of this AuthTokenRenewalResponse.


        :return: The token_expiration_datetime of this AuthTokenRenewalResponse.
        :rtype: datetime
        """
        return self._token_expiration_datetime

    @token_expiration_datetime.setter
    def token_expiration_datetime(self, token_expiration_datetime: datetime):
        """Sets the token_expiration_datetime of this AuthTokenRenewalResponse.


        :param token_expiration_datetime: The token_expiration_datetime of this AuthTokenRenewalResponse.
        :type token_expiration_datetime: datetime
        """

        self._token_expiration_datetime = token_expiration_datetime
