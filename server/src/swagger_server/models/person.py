# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, person_id: int=None, photo_blob_name: str=None, full_name: str=None, birth_date: datetime=None, nationality: str=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param person_id: The person_id of this Person.  # noqa: E501
        :type person_id: int
        :param photo_blob_name: The photo_blob_name of this Person.  # noqa: E501
        :type photo_blob_name: str
        :param full_name: The full_name of this Person.  # noqa: E501
        :type full_name: str
        :param birth_date: The birth_date of this Person.  # noqa: E501
        :type birth_date: datetime
        :param nationality: The nationality of this Person.  # noqa: E501
        :type nationality: str
        """
        self.swagger_types = {
            'person_id': int,
            'photo_blob_name': str,
            'full_name': str,
            'birth_date': datetime,
            'nationality': str
        }

        self.attribute_map = {
            'person_id': 'personId',
            'photo_blob_name': 'photoBlobName',
            'full_name': 'fullName',
            'birth_date': 'birthDate',
            'nationality': 'nationality'
        }
        self._person_id = person_id
        self._photo_blob_name = photo_blob_name
        self._full_name = full_name
        self._birth_date = birth_date
        self._nationality = nationality

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def person_id(self) -> int:
        """Gets the person_id of this Person.


        :return: The person_id of this Person.
        :rtype: int
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id: int):
        """Sets the person_id of this Person.


        :param person_id: The person_id of this Person.
        :type person_id: int
        """

        self._person_id = person_id

    @property
    def photo_blob_name(self) -> str:
        """Gets the photo_blob_name of this Person.


        :return: The photo_blob_name of this Person.
        :rtype: str
        """
        return self._photo_blob_name

    @photo_blob_name.setter
    def photo_blob_name(self, photo_blob_name: str):
        """Sets the photo_blob_name of this Person.


        :param photo_blob_name: The photo_blob_name of this Person.
        :type photo_blob_name: str
        """

        self._photo_blob_name = photo_blob_name

    @property
    def full_name(self) -> str:
        """Gets the full_name of this Person.


        :return: The full_name of this Person.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this Person.


        :param full_name: The full_name of this Person.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def birth_date(self) -> datetime:
        """Gets the birth_date of this Person.


        :return: The birth_date of this Person.
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date: datetime):
        """Sets the birth_date of this Person.


        :param birth_date: The birth_date of this Person.
        :type birth_date: datetime
        """

        self._birth_date = birth_date

    @property
    def nationality(self) -> str:
        """Gets the nationality of this Person.


        :return: The nationality of this Person.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality: str):
        """Sets the nationality of this Person.


        :param nationality: The nationality of this Person.
        :type nationality: str
        """

        self._nationality = nationality
