# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Person(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, pid: str=None, name: str=None, born: int=None, nationality: str=None, features: str=None):  # noqa: E501
        """Person - a model defined in Swagger

        :param id: The id of this Person.  # noqa: E501
        :type id: int
        :param pid: The pid of this Person.  # noqa: E501
        :type pid: str
        :param name: The name of this Person.  # noqa: E501
        :type name: str
        :param born: The born of this Person.  # noqa: E501
        :type born: int
        :param nationality: The nationality of this Person.  # noqa: E501
        :type nationality: str
        :param features: The features of this Person.  # noqa: E501
        :type features: str
        """
        self.swagger_types = {
            'id': int,
            'pid': str,
            'name': str,
            'born': int,
            'nationality': str,
            'features': str
        }

        self.attribute_map = {
            'id': 'id',
            'pid': 'pid',
            'name': 'name',
            'born': 'born',
            'nationality': 'nationality',
            'features': 'features'
        }
        self._id = id
        self._pid = pid
        self._name = name
        self._born = born
        self._nationality = nationality
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Person.


        :return: The id of this Person.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Person.


        :param id: The id of this Person.
        :type id: int
        """

        self._id = id

    @property
    def pid(self) -> str:
        """Gets the pid of this Person.


        :return: The pid of this Person.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid: str):
        """Sets the pid of this Person.


        :param pid: The pid of this Person.
        :type pid: str
        """

        self._pid = pid

    @property
    def name(self) -> str:
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def born(self) -> int:
        """Gets the born of this Person.


        :return: The born of this Person.
        :rtype: int
        """
        return self._born

    @born.setter
    def born(self, born: int):
        """Sets the born of this Person.


        :param born: The born of this Person.
        :type born: int
        """

        self._born = born

    @property
    def nationality(self) -> str:
        """Gets the nationality of this Person.


        :return: The nationality of this Person.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality: str):
        """Sets the nationality of this Person.


        :param nationality: The nationality of this Person.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def features(self) -> str:
        """Gets the features of this Person.


        :return: The features of this Person.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features: str):
        """Sets the features of this Person.


        :param features: The features of this Person.
        :type features: str
        """

        self._features = features
